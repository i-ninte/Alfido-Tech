# -*- coding: utf-8 -*-
"""uber analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5LlQ3X-91XVLhBBEV2TWFXv65O67YqW

# UBER DATA ANALYSIS

Uber is a multinational transportation network company that operates a platform connecting riders with drivers through a mobile app. It was founded in 2009 and has since become one of the most well-known examples of a ride-hailing service. Uber allows users to request a ride from their current location to a desired destination using their smartphone. The app matches the user with an available driver in the area, and the driver arrives to pick up the passenger.

Uber offers various types of services, including UberX (standard car), UberXL (larger vehicles), UberBlack (luxury vehicles), and UberPOOL (shared rides with other passengers traveling in the same direction). The fares for rides are calculated based on factors such as distance traveled, time spent on the trip, and demand at the time of the request.

Uber has gained popularity for its convenience, ease of use, and competitive pricing compared to traditional taxi services. It has expanded its operations to numerous cities around the world and has also introduced other services like food delivery (Uber Eats) and package delivery (Uber Connect).

## IMPORTING LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## READING THE DATASET"""

data= pd.read_csv("uber.csv")

"""## PREVIEWING THE DATASET"""

data.head()

data.info()

data.describe()

data.shape

"""## DATA CLEANING"""

data.isnull().sum()

data = data.dropna()

data.shape

duplicates= data[data.duplicated()]

duplicates

data= data.drop_duplicates()

data

"""## EXPLORATION AND ANALYSIS

### CATEGORY ANALYSIS
"""

category_counts = data['CATEGORY'].value_counts()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x=category_counts, y=category_counts.index, palette='viridis')
plt.title('Distribution of Categories')
plt.xlabel('Number of Rides')
plt.ylabel('Category')
plt.show()

"""The analysis of ride data indicates a pronounced preference for business-category trips, comprising nearly 99% of the rides, while personal-category rides constitute less than 1%. This underscores a significant reliance on the service for professional purposes. To capitalize on this trend, recommendations include offering tailored business packages, establishing corporate partnerships, emphasizing marketing strategies directed at business users, implementing customized invoicing for efficient expense tracking, and maintaining open communication channels for user feedback. Aligning services with the predominant business usage patterns can enhance the service's appeal to professionals and foster potential corporate collaborations.

## PURPOSE OF THE RIDES
"""

# Calculate the counts of each purpose
purpose_counts = data['PURPOSE'].value_counts()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x=purpose_counts, y=purpose_counts.index, palette='viridis')
plt.title('Distribution of Rides by Purpose')
plt.xlabel('Number of Rides')
plt.ylabel('Purpose')
plt.show()

"""The distribution of rides by purpose, as depicted in the above diagram, reveals that the majority of rides serve the purpose of meetings, followed by Meal/Entertain, Errands/Supply, Customer Visit, Temporal Site, Between Offices, Moving, and Airport/Travel. Charity and Commute have the least frequency.

The observed distribution of rides by purpose suggests that business-related activities, such as meetings and meal/entertainment engagements, dominate the usage of rides. This insight could influence resource allocation, such as optimizing transportation services during peak meeting hours. Additionally, considering the lower frequency of rides for purposes like charity and commute, there might be an opportunity to encourage and facilitate ridesharing initiatives for these purposes to enhance efficiency and environmental sustainability. Regularly assessing and adjusting service offerings based on the predominant purposes could lead to a more tailored and efficient transportation service.

"""

# Calculate the counts of each category based on 'PURPOSE'
category_counts_by_purpose = data.groupby('PURPOSE')['CATEGORY'].value_counts().unstack()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
category_counts_by_purpose.plot(kind='barh', stacked=True, colormap='viridis')
plt.title('Distribution of Categories by Purpose')
plt.xlabel('Number of Rides')
plt.ylabel('Purpose')
plt.legend(title='Category', loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

"""The chart above explores the distribution of ride categories by purpose. It reveals that only the purposes of moving, commute, and charity fall under the personal category, while the rest are categorized as business. This classification provides valuable insights into the nature of trips, indicating a clear separation between personal and business-related purposes.


This observation implies a predominant association of the rides with business-related purposes as already explained, as evidenced by the overwhelming majority categorized as such. The limited representation of personal purposes in the provided data suggests a focus on professional activities. To capitalize on this trend, recommendations include optimizing services for business travelers, offering corporate packages, and tailoring marketing efforts towards professionals. Additionally, considering the potential demand for personal rides, exploring strategies to attract and cater to this segment could open up new market opportunities and diversify the user base. Regular feedback collection from users in both categories can provide insights for continuous improvement and customization of services.

## PEAK TIME ANALYSIS
"""

# Convert 'START_DATE' and 'END_DATE' columns to datetime objects with inferred format
data['START_DATE'] = pd.to_datetime(data['START_DATE'], errors='coerce')
data['END_DATE'] = pd.to_datetime(data['END_DATE'], errors='coerce')

data['DURATION'] = (data['END_DATE'] - data['START_DATE']).dt.total_seconds() / 60

max_peak_time = data.loc[data['DURATION'].idxmax()]['START_DATE']
min_peak_time = data.loc[data['DURATION'].idxmin()]['START_DATE']

plt.figure(figsize=(10, 6))
sns.lineplot(x='START_DATE', y='DURATION', data=data, label='Duration of Rides')
plt.scatter([max_peak_time, min_peak_time], [data['DURATION'].max(), data['DURATION'].min()], color='red', label='Peak Times')
plt.title('Peak Times Analysis')
plt.xlabel('Start Date')
plt.ylabel('Duration (minutes)')
plt.legend()
plt.show()

"""## WEEKDAYS VS WEEKENDS RIDES"""

# Convert 'START_DATE' to datetime and extract the week
data['START_DATE'] = pd.to_datetime(data['START_DATE'])
data['Week'] = data['START_DATE'].dt.strftime('%Y-%U')

# Calculate the number of rides per week
weekly_rides = data['Week'].value_counts().sort_index()

# Plot the weekly trends
plt.figure(figsize=(30, 15))
sns.lineplot(x=weekly_rides.index, y=weekly_rides.values, marker='o', color='blue')
plt.title('Weekly Trends in Ride Data')
plt.xlabel('Week')
plt.ylabel('Number of Rides')
plt.grid(True)
plt.show()

"""The chart illustrates fluctuations in the number of rides throughout the year. Notably, there was a surge from the first to the fifth week, followed by a slight decline in week 6. Subsequently, rides increased until the 9th week, experiencing a gradual decrease in week 10. The downward trend continued until week 13, with a minor upturn in week 14 before dropping in week 15, nearly equaling the count in the first week. A sharp rise occurred from week 15 to 18, abruptly dropping in week 19. A slight increase transpired in week 22, reaching the peak in week 23, followed by a sudden decline. The subsequent weeks, starting from 24, witnessed a gradual increase until week 31, which marked the lowest ride count. Weeks 31 to 32 showed a slight rise, with a minor dip in week 41. Weeks 41 to 45 exhibited a gradual increase, followed by a slight decrease from 45 to 48. The period from 48 to 49 saw a gradual rise, while rides decreased from week 49 to week 50.

The observed patterns in ride distribution throughout the year suggest varying demand trends. Peaks and troughs indicate periods of increased or decreased ride requests, potentially influenced by external factors such as seasons, holidays, or local events. Understanding these fluctuations can help optimize resource allocation and improve service efficiency. Recommendations include implementing targeted marketing or promotions during peak periods to capitalize on increased demand. Additionally, optimizing staffing levels during expected high-demand periods and strategizing for lulls can enhance operational efficiency. Regularly analyzing and adapting to these trends will contribute to better service planning and customer satisfaction

The overall trend indicates that the majority of rides occur between 12:00 and 18:00, with the highest peak observed at 20:00. Conversely, the periods between 1:00 to 2:00 and 5:00 to 6:00 experience the least ride activity. Notably, there are no recorded rides at 4:00. This information can guide operational decisions, such as optimizing driver availability during peak hours and potentially offering incentives for drivers during periods of lower demand. Adjusting marketing strategies and service promotions to align with these peak and off-peak hours can enhance the efficiency of the ride-sharing service.
"""

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract date from the start time
data['Date'] = data['START_DATE'].dt.date

# Convert 'Date' to datetime
data['Date'] = pd.to_datetime(data['Date'])

# Calculate the average number of rides for each day of the month
average_rides_per_day = data.groupby(data['Date'].dt.day)['Date'].count().mean()

# Plot the average rides for each day of the month
plt.figure(figsize=(12, 6))
sns.barplot(x=data['Date'].dt.day, y=data.groupby(data['Date'].dt.day)['Date'].count(), color='skyblue')
plt.axhline(y=average_rides_per_day, color='orange', linestyle='--', label='Average Daily Rides')
plt.title('Average Rides for Each Day of the Month')
plt.xlabel('Day of the Month')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

"""Average daily rides is about 22 rides. Most rides occuring on the 6th day of the month."""

# Assuming 'START_DATE' is the column with datetime information
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Create a new column for the month
data['MONTH'] = data['START_DATE'].dt.month

# Plot the number of rides for each month
plt.figure(figsize=(10, 6))
sns.countplot(x='MONTH', data=data, palette='viridis')
plt.title('Number of Rides by Month')
plt.xlabel('Month')
plt.ylabel('Number of Rides')
plt.show()

"""The analysis of ride frequency by month reveals that December has the highest number of rides, followed by February, June, March, November, January, April, May, and July. Notably, October and August have fewer rides, and there were no recorded rides for September. The presence of null values in September may have led to the exclusion of data for that month. Understanding these monthly patterns can inform business strategies, allowing for targeted promotions or incentives during months with lower ride activity and ensuring preparedness for increased demand during peak months like December.

"""

8# Group by start and stop locations and count the number of occurrences
route_counts = data.groupby(['START', 'STOP']).size().reset_index(name='Count')

# Combine 'START' and 'STOP' columns into a new column 'Route'
route_counts['Route'] = route_counts['START'] + ' - ' + route_counts['STOP']

# Sort routes by count in descending order to find the most taken paths
most_taken_routes = route_counts.sort_values(by='Count', ascending=False)

# Plot the top N routes (adjust N as needed)
top_n = 10
plt.figure(figsize=(12, 8))
sns.barplot(x='Count', y='Route', data=most_taken_routes.head(top_n))
plt.title(f'Top {top_n} Most Taken Paths or Routes')
plt.xlabel('Number of Rides')
plt.ylabel('Start - Stop Route')
plt.show()

# Count the number of occurrences for each stop location
stop_counts = data['STOP'].value_counts().reset_index(name='Count')

# Rename the columns for clarity
stop_counts.columns = ['Stop Location', 'Count']

# Sort stop locations by count in descending order
top_10_stops = stop_counts.sort_values(by='Count', ascending=False).head(10)

# Plot the top 10 stop locations
plt.figure(figsize=(10, 6))
sns.barplot(x='Count', y='Stop Location', data=top_10_stops, palette='viridis')

plt.title('Top 10 Stop Locations with the Most Rides')
plt.xlabel('Number of Rides')
plt.ylabel('Stop Location')
plt.show()

"""This shoes the loaction with most rides to be Cary and the least is Berkeley."""

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract the hour from 'START_DATE'
data['Hour'] = data['START_DATE'].dt.hour

# Plot the number of rides at each time of the day
plt.figure(figsize=(12, 6))
sns.countplot(x='Hour', data=data, palette='viridis')
plt.title('Number of Rides at Each Time of the Day')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.show()

"""The overall trend indicates that the majority of rides occur between 12:00 and 18:00, with the highest peak observed at 20:00. Conversely, the periods between 1:00 to 2:00 and 5:00 to 6:00 experience the least ride activity. Notably, there are no recorded rides at 4:00. This information can guide operational decisions, such as optimizing driver availability during peak hours and potentially offering incentives for drivers during periods of lower demand. Adjusting marketing strategies and service promotions to align with these peak and off-peak hours can enhance the efficiency of the ride-sharing service.

"""

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract the day of the week from 'START_DATE'
data['Day_of_Week'] = data['START_DATE'].dt.day_name()

# Map weekdays and weekends
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Weekday', 1: 'Weekday', 2: 'Weekday', 3: 'Weekday', 4: 'Weekday', 5: 'Weekend', 6: 'Weekend'})

# Plot the number of rides on weekends vs. weekdays
plt.figure(figsize=(10, 6))
sns.countplot(x='Day_Type', data=data, palette='Set2')
plt.title('Number of Rides on Weekends vs. Weekdays')
plt.xlabel('Day Type')
plt.ylabel('Number of Rides')
plt.show()

"""It was obvious that the number of rides for weekdays will be higher than the number of rides on weekends.

"""

data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Create a new column for the hour of the day
data['Hour'] = data['START_DATE'].dt.hour

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday'})

# Plot the distribution of rides during different times of the day for weekdays
plt.figure(figsize=(12, 8))
sns.lineplot(x=data[data['Day_Type'] != 'Weekend']['Hour'].value_counts().sort_index().index,
             y=data[data['Day_Type'] != 'Weekend']['Hour'].value_counts().sort_index().values,
             label='Weekdays', color='blue')

plt.title('Distribution of Rides During Different Times of the Day on Weekdays')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

"""During weekdays, there is a noticeable surge in the number of rides starting at 6:00 AM, indicating the peak of morning commuting hours when people are likely heading to work. This trend continues until around 12:00 PM. Another significant increase in rides occurs from 12:00 PM to 2:00 PM, possibly reflecting lunchtime or midday activities. There's a subsequent rise in rides starting around 6:00 PM, suggesting the evening rush hour as individuals leave work. However, the number of rides starts to decrease after 8:00 PM, indicating a decline in activity during late evening hours. This pattern aligns with typical workday commuting behaviors.

"""

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})

# Plot the distribution of rides during different times of the day for weekends
plt.figure(figsize=(12, 8))
sns.lineplot(x=data[data['Day_Type'].isin(['Saturday', 'Sunday'])]['Hour'].value_counts().sort_index().index,
             y=data[data['Day_Type'].isin(['Saturday', 'Sunday'])]['Hour'].value_counts().sort_index().values,
             label='Weekends', color='orange')

plt.title('Distribution of Rides During Different Times of the Day on Weekends')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

"""During weekends, there is a consistent low number of rides recorded, indicating a slower pace of activity compared to weekdays. The initial increase in rides around 11:00 suggests a gradual start to the day, possibly after leisurely mornings. A more significant rise in rides occurs around 13:00, possibly indicating the beginning of afternoon activities or outings. The decline in rides around 20:00 suggests a decrease in evening activities, and the subsequent increase around 22:00 might indicate a late-night resurgence in rides. Overall, the weekend pattern contrasts with weekdays, emphasizing a more relaxed and varied schedule with a distinct absence of the typical work-related commuting peaks.

"""

data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Create a new column for the hour of the day
data['Hour'] = data['START_DATE'].dt.hour

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})

# Plot the distribution of rides during different times of the day for each purpose
plt.figure(figsize=(12, 8))
sns.countplot(x='Hour', hue='PURPOSE', data=data)
plt.title('Distribution of Rides During Different Times of the Day for Each Purpose')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend(title='Purpose', loc='upper left', bbox_to_anchor=(1, 1))
plt.show()

average_distance_by_purpose = data.groupby('PURPOSE')['MILES'].mean().reset_index()

# Plot the average distance for each purpose
plt.figure(figsize=(12, 8))
sns.barplot(x='MILES', y='PURPOSE', data=average_distance_by_purpose, palette='viridis')
plt.title('Average Distance Traveled for Different Purposes')
plt.xlabel('Average Distance (Miles)')
plt.ylabel('Purpose')
plt.show()

"""## INFERENCE
Based on the observations, the analysis highlights distinct patterns in ride activity during weekdays and weekends, indicating a shift in user behavior. Weekdays witness a surge in rides during morning and evening commuting hours, aligning with typical workday schedules. In contrast, weekends show a consistent but lower ride activity, suggesting a more relaxed and varied schedule. The monthly analysis identifies December as the peak period for rides, potentially influenced by holiday festivities. The time-of-day analysis reveals peak ride times between 12:00 and 18:00, with the highest peak at 20:00, guiding operational decisions for driver availability and marketing strategies. The analysis of ride purposes emphasizes a strong association with business-related activities, opening opportunities for tailored services and corporate partnerships. Overall, recommendations include optimizing services during peak periods, targeted promotions, and adapting strategies based on observed trends for improved operational efficiency and customer satisfaction.
"""

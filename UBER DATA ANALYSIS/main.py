# -*- coding: utf-8 -*-
"""uber analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5LlQ3X-91XVLhBBEV2TWFXv65O67YqW

Uber is a multinational transportation network company that operates a platform connecting riders with drivers through a mobile app. It was founded in 2009 and has since become one of the most well-known examples of a ride-hailing service. Uber allows users to request a ride from their current location to a desired destination using their smartphone. The app matches the user with an available driver in the area, and the driver arrives to pick up the passenger.

Uber offers various types of services, including UberX (standard car), UberXL (larger vehicles), UberBlack (luxury vehicles), and UberPOOL (shared rides with other passengers traveling in the same direction). The fares for rides are calculated based on factors such as distance traveled, time spent on the trip, and demand at the time of the request.

Uber has gained popularity for its convenience, ease of use, and competitive pricing compared to traditional taxi services. It has expanded its operations to numerous cities around the world and has also introduced other services like food delivery (Uber Eats) and package delivery (Uber Connect).

IMPORTING LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""READING THE DATASET"""

data= pd.read_csv("uber.csv")

"""PREVIEWING THE DATASET"""

data.head()

data.info()

data.describe()

data.shape

"""DATA CLEANING"""

data.isnull().sum()

data = data.dropna()

data.shape

duplicates= data[data.duplicated()]

duplicates

data= data.drop_duplicates()

data

"""EXPLORATION AND ANALYSIS"""

category_counts = data['CATEGORY'].value_counts()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x=category_counts, y=category_counts.index, palette='viridis')
plt.title('Distribution of Categories')
plt.xlabel('Number of Rides')
plt.ylabel('Category')
plt.show()

# Calculate the counts of each purpose
purpose_counts = data['PURPOSE'].value_counts()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x=purpose_counts, y=purpose_counts.index, palette='viridis')
plt.title('Distribution of Rides by Purpose')
plt.xlabel('Number of Rides')
plt.ylabel('Purpose')
plt.show()

# Calculate the counts of each category based on 'PURPOSE'
category_counts_by_purpose = data.groupby('PURPOSE')['CATEGORY'].value_counts().unstack()

# Plot a horizontal bar chart
plt.figure(figsize=(10, 6))
category_counts_by_purpose.plot(kind='barh', stacked=True, colormap='viridis')
plt.title('Distribution of Categories by Purpose')
plt.xlabel('Number of Rides')
plt.ylabel('Purpose')
plt.legend(title='Category', loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

# Convert 'START_DATE' and 'END_DATE' columns to datetime objects with inferred format
data['START_DATE'] = pd.to_datetime(data['START_DATE'], errors='coerce')
data['END_DATE'] = pd.to_datetime(data['END_DATE'], errors='coerce')

data['DURATION'] = (data['END_DATE'] - data['START_DATE']).dt.total_seconds() / 60

max_peak_time = data.loc[data['DURATION'].idxmax()]['START_DATE']
min_peak_time = data.loc[data['DURATION'].idxmin()]['START_DATE']

plt.figure(figsize=(10, 6))
sns.lineplot(x='START_DATE', y='DURATION', data=data, label='Duration of Rides')
plt.scatter([max_peak_time, min_peak_time], [data['DURATION'].max(), data['DURATION'].min()], color='red', label='Peak Times')
plt.title('Peak Times Analysis')
plt.xlabel('Start Date')
plt.ylabel('Duration (minutes)')
plt.legend()
plt.show()

# Convert 'START_DATE' to datetime and extract the week
data['START_DATE'] = pd.to_datetime(data['START_DATE'])
data['Week'] = data['START_DATE'].dt.strftime('%Y-%U')

# Calculate the number of rides per week
weekly_rides = data['Week'].value_counts().sort_index()

# Plot the weekly trends
plt.figure(figsize=(30, 15))
sns.lineplot(x=weekly_rides.index, y=weekly_rides.values, marker='o', color='blue')
plt.title('Weekly Trends in Ride Data')
plt.xlabel('Week')
plt.ylabel('Number of Rides')
plt.grid(True)
plt.show()

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract the hour from the start time
data['Hour'] = data['START_DATE'].dt.hour

# Plot the distribution of start times
plt.figure(figsize=(12, 6))
sns.histplot(data['Hour'], bins=24, kde=True, color='skyblue')
plt.title('Distribution of Start Times')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.xticks(range(24))
plt.show()

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract date from the start time
data['Date'] = data['START_DATE'].dt.date

# Convert 'Date' to datetime
data['Date'] = pd.to_datetime(data['Date'])

# Calculate the average number of rides for each day of the month
average_rides_per_day = data.groupby(data['Date'].dt.day)['Date'].count().mean()

# Plot the average rides for each day of the month
plt.figure(figsize=(12, 6))
sns.barplot(x=data['Date'].dt.day, y=data.groupby(data['Date'].dt.day)['Date'].count(), color='skyblue')
plt.axhline(y=average_rides_per_day, color='orange', linestyle='--', label='Average Daily Rides')
plt.title('Average Rides for Each Day of the Month')
plt.xlabel('Day of the Month')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

# Group by start and stop locations and count the number of occurrences
route_counts = data.groupby(['START', 'STOP']).size().reset_index(name='Count')

# Combine 'START' and 'STOP' columns into a new column 'Route'
route_counts['Route'] = route_counts['START'] + ' - ' + route_counts['STOP']

# Sort routes by count in descending order to find the most taken paths
most_taken_routes = route_counts.sort_values(by='Count', ascending=False)

# Plot the top N routes (adjust N as needed)
top_n = 10
plt.figure(figsize=(12, 8))
sns.barplot(x='Count', y='Route', data=most_taken_routes.head(top_n))
plt.title(f'Top {top_n} Most Taken Paths or Routes')
plt.xlabel('Number of Rides')
plt.ylabel('Start - Stop Route')
plt.show()

# Count the number of occurrences for each stop location
stop_counts = data['STOP'].value_counts().reset_index(name='Count')

# Rename the columns for clarity
stop_counts.columns = ['Stop Location', 'Count']

# Sort stop locations by count in descending order
top_10_stops = stop_counts.sort_values(by='Count', ascending=False).head(10)

# Plot the top 10 stop locations
plt.figure(figsize=(10, 6))
sns.barplot(x='Count', y='Stop Location', data=top_10_stops, palette='viridis')

plt.title('Top 10 Stop Locations with the Most Rides')
plt.xlabel('Number of Rides')
plt.ylabel('Stop Location')
plt.show()

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract the hour from 'START_DATE'
data['Hour'] = data['START_DATE'].dt.hour

# Plot the number of rides at each time of the day
plt.figure(figsize=(12, 6))
sns.countplot(x='Hour', data=data, palette='viridis')
plt.title('Number of Rides at Each Time of the Day')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.show()

# Convert 'START_DATE' to datetime
data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Extract the day of the week from 'START_DATE'
data['Day_of_Week'] = data['START_DATE'].dt.day_name()

# Map weekdays and weekends
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Weekday', 1: 'Weekday', 2: 'Weekday', 3: 'Weekday', 4: 'Weekday', 5: 'Weekend', 6: 'Weekend'})

# Plot the number of rides on weekends vs. weekdays
plt.figure(figsize=(10, 6))
sns.countplot(x='Day_Type', data=data, palette='Set2')
plt.title('Number of Rides on Weekends vs. Weekdays')
plt.xlabel('Day Type')
plt.ylabel('Number of Rides')
plt.show()

data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Create a new column for the hour of the day
data['Hour'] = data['START_DATE'].dt.hour

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday'})

# Plot the distribution of rides during different times of the day for weekdays
plt.figure(figsize=(12, 8))
sns.lineplot(x=data[data['Day_Type'] != 'Weekend']['Hour'].value_counts().sort_index().index,
             y=data[data['Day_Type'] != 'Weekend']['Hour'].value_counts().sort_index().values,
             label='Weekdays', color='blue')

plt.title('Distribution of Rides During Different Times of the Day on Weekdays')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})

# Plot the distribution of rides during different times of the day for weekends
plt.figure(figsize=(12, 8))
sns.lineplot(x=data[data['Day_Type'].isin(['Saturday', 'Sunday'])]['Hour'].value_counts().sort_index().index,
             y=data[data['Day_Type'].isin(['Saturday', 'Sunday'])]['Hour'].value_counts().sort_index().values,
             label='Weekends', color='orange')

plt.title('Distribution of Rides During Different Times of the Day on Weekends')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend()
plt.show()

data['START_DATE'] = pd.to_datetime(data['START_DATE'])

# Create a new column for the hour of the day
data['Hour'] = data['START_DATE'].dt.hour

# Map weekdays
data['Day_Type'] = data['START_DATE'].dt.dayofweek.map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})

# Plot the distribution of rides during different times of the day for each purpose
plt.figure(figsize=(12, 8))
sns.countplot(x='Hour', hue='PURPOSE', data=data)
plt.title('Distribution of Rides During Different Times of the Day for Each Purpose')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Rides')
plt.legend(title='Purpose', loc='upper left', bbox_to_anchor=(1, 1))
plt.show()

average_distance_by_purpose = data.groupby('PURPOSE')['MILES'].mean().reset_index()

# Plot the average distance for each purpose
plt.figure(figsize=(12, 8))
sns.barplot(x='MILES', y='PURPOSE', data=average_distance_by_purpose, palette='viridis')
plt.title('Average Distance Traveled for Different Purposes')
plt.xlabel('Average Distance (Miles)')
plt.ylabel('Purpose')
plt.show()


